apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: prometheus
    spec:
      containers:
      - name: prometheus
        image: docker.io/prom/prometheus
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        resources:
          limits:
            cpu: 1000m
            memory: 4Gi
          requests:
            cpu: 100m
            memory: 1Gi
        volumeMounts:
        - name: data
          mountPath: /prometheus
        - name: config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
          readOnly: true
        #livenessProbe:
        #  httpGet:
        #    path: /
        #    port: http
        #  initialDelaySeconds: 60
        #  periodSeconds: 10
        #  timeoutSeconds: 5
        #  successThreshold: 1
        #  failureThreshold: 6
        #readinessProbe:
        #  httpGet:
        #    path: /
        #    port: http
        #  initialDelaySeconds: 30
        #  periodSeconds: 5
        #  timeoutSeconds: 3
        #  successThreshold: 1
        #  failureThreshold: 6
      volumes:
      - name: config
        configMap:
          name: prometheus
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi
---
apiVersion: v1
data:
  prometheus.yml: |
    # my global config
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              # - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      #- job_name: "prometheus"

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

      #  static_configs:
      #    - targets: ["localhost:9090"]

      - job_name: "vllm"
        scheme: https
        metrics_path: "/metrics/"
        tls_config:
          insecure_skip_verify: true
        static_configs:
          - targets: ["replaceme"]
kind: ConfigMap
metadata:
  name: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: prometheus
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
  name: prometheus
spec:
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
  port:
    targetPort: http
  to:
    kind: Service
    name: prometheus
    weight: 100
  wildcardPolicy: None
status: {}